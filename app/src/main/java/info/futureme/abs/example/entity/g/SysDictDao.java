package info.futureme.abs.example.entity.g;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "sysdict".
*/
public class SysDictDao extends AbstractDao<SysDict, Long> {

    public static final String TABLENAME = "sysdict";

    /**
     * Properties of entity SysDict.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property DictId = new Property(1, Integer.class, "dictId", false, "DICT_ID");
        public final static Property DictType = new Property(2, Integer.class, "dictType", false, "DICT_TYPE");
        public final static Property DictCode = new Property(3, String.class, "dictCode", false, "DICT_CODE");
        public final static Property DictName = new Property(4, String.class, "dictName", false, "DICT_NAME");
        public final static Property IsDelete = new Property(5, Integer.class, "isDelete", false, "IS_DELETE");
        public final static Property Rank = new Property(6, Integer.class, "rank", false, "RANK");
    };


    public SysDictDao(DaoConfig config) {
        super(config);
    }
    
    public SysDictDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"sysdict\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DICT_ID\" INTEGER," + // 1: dictId
                "\"DICT_TYPE\" INTEGER," + // 2: dictType
                "\"DICT_CODE\" TEXT," + // 3: dictCode
                "\"DICT_NAME\" TEXT," + // 4: dictName
                "\"IS_DELETE\" INTEGER," + // 5: isDelete
                "\"RANK\" INTEGER);"); // 6: rank
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_sysdict_ID ON sysdict" +
                " (\"ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"sysdict\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SysDict entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer dictId = entity.getDictId();
        if (dictId != null) {
            stmt.bindLong(2, dictId);
        }
 
        Integer dictType = entity.getDictType();
        if (dictType != null) {
            stmt.bindLong(3, dictType);
        }
 
        String dictCode = entity.getDictCode();
        if (dictCode != null) {
            stmt.bindString(4, dictCode);
        }
 
        String dictName = entity.getDictName();
        if (dictName != null) {
            stmt.bindString(5, dictName);
        }
 
        Integer isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindLong(6, isDelete);
        }
 
        Integer rank = entity.getRank();
        if (rank != null) {
            stmt.bindLong(7, rank);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SysDict readEntity(Cursor cursor, int offset) {
        SysDict entity = new SysDict( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // dictId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // dictType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dictCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dictName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // isDelete
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // rank
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SysDict entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDictId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDictType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDictCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDictName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsDelete(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRank(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SysDict entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SysDict entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
