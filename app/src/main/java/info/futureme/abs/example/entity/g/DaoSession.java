package info.futureme.abs.example.entity.g;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig notificationDaoConfig;
    private final DaoConfig attachmentDaoConfig;
    private final DaoConfig projectDaoConfig;
    private final DaoConfig clientDaoConfig;
    private final DaoConfig stationDaoConfig;
    private final DaoConfig uploadLocationDaoConfig;
    private final DaoConfig sysDictDaoConfig;
    private final DaoConfig fileCacheDaoConfig;
    private final DaoConfig syncCodeDaoConfig;

    private final NotificationDao notificationDao;
    private final AttachmentDao attachmentDao;
    private final ProjectDao projectDao;
    private final ClientDao clientDao;
    private final StationDao stationDao;
    private final UploadLocationDao uploadLocationDao;
    private final SysDictDao sysDictDao;
    private final FileCacheDao fileCacheDao;
    private final SyncCodeDao syncCodeDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        notificationDaoConfig = daoConfigMap.get(NotificationDao.class).clone();
        notificationDaoConfig.initIdentityScope(type);

        attachmentDaoConfig = daoConfigMap.get(AttachmentDao.class).clone();
        attachmentDaoConfig.initIdentityScope(type);

        projectDaoConfig = daoConfigMap.get(ProjectDao.class).clone();
        projectDaoConfig.initIdentityScope(type);

        clientDaoConfig = daoConfigMap.get(ClientDao.class).clone();
        clientDaoConfig.initIdentityScope(type);

        stationDaoConfig = daoConfigMap.get(StationDao.class).clone();
        stationDaoConfig.initIdentityScope(type);

        uploadLocationDaoConfig = daoConfigMap.get(UploadLocationDao.class).clone();
        uploadLocationDaoConfig.initIdentityScope(type);

        sysDictDaoConfig = daoConfigMap.get(SysDictDao.class).clone();
        sysDictDaoConfig.initIdentityScope(type);

        fileCacheDaoConfig = daoConfigMap.get(FileCacheDao.class).clone();
        fileCacheDaoConfig.initIdentityScope(type);

        syncCodeDaoConfig = daoConfigMap.get(SyncCodeDao.class).clone();
        syncCodeDaoConfig.initIdentityScope(type);

        notificationDao = new NotificationDao(notificationDaoConfig, this);
        attachmentDao = new AttachmentDao(attachmentDaoConfig, this);
        projectDao = new ProjectDao(projectDaoConfig, this);
        clientDao = new ClientDao(clientDaoConfig, this);
        stationDao = new StationDao(stationDaoConfig, this);
        uploadLocationDao = new UploadLocationDao(uploadLocationDaoConfig, this);
        sysDictDao = new SysDictDao(sysDictDaoConfig, this);
        fileCacheDao = new FileCacheDao(fileCacheDaoConfig, this);
        syncCodeDao = new SyncCodeDao(syncCodeDaoConfig, this);

        registerDao(Notification.class, notificationDao);
        registerDao(Attachment.class, attachmentDao);
        registerDao(Project.class, projectDao);
        registerDao(Client.class, clientDao);
        registerDao(Station.class, stationDao);
        registerDao(UploadLocation.class, uploadLocationDao);
        registerDao(SysDict.class, sysDictDao);
        registerDao(FileCache.class, fileCacheDao);
        registerDao(SyncCode.class, syncCodeDao);
    }
    
    public void clear() {
        notificationDaoConfig.getIdentityScope().clear();
        attachmentDaoConfig.getIdentityScope().clear();
        projectDaoConfig.getIdentityScope().clear();
        clientDaoConfig.getIdentityScope().clear();
        stationDaoConfig.getIdentityScope().clear();
        uploadLocationDaoConfig.getIdentityScope().clear();
        sysDictDaoConfig.getIdentityScope().clear();
        fileCacheDaoConfig.getIdentityScope().clear();
        syncCodeDaoConfig.getIdentityScope().clear();
    }

    public NotificationDao getNotificationDao() {
        return notificationDao;
    }

    public AttachmentDao getAttachmentDao() {
        return attachmentDao;
    }

    public ProjectDao getProjectDao() {
        return projectDao;
    }

    public ClientDao getClientDao() {
        return clientDao;
    }

    public StationDao getStationDao() {
        return stationDao;
    }

    public UploadLocationDao getUploadLocationDao() {
        return uploadLocationDao;
    }

    public SysDictDao getSysDictDao() {
        return sysDictDao;
    }

    public FileCacheDao getFileCacheDao() {
        return fileCacheDao;
    }

    public SyncCodeDao getSyncCodeDao() {
        return syncCodeDao;
    }

}
