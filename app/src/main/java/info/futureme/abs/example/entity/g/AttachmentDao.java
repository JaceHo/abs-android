package info.futureme.abs.example.entity.g;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "attachment".
*/
public class AttachmentDao extends AbstractDao<Attachment, Long> {

    public static final String TABLENAME = "attachment";

    /**
     * Properties of entity Attachment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Ticketid = new Property(2, String.class, "ticketid", false, "TICKETID");
        public final static Property Status = new Property(3, Integer.class, "status", false, "STATUS");
        public final static Property ClientName = new Property(4, String.class, "clientName", false, "CLIENT_NAME");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property LazyId = new Property(6, String.class, "lazyId", false, "LAZY_ID");
        public final static Property FailedTime = new Property(7, Integer.class, "failedTime", false, "FAILED_TIME");
        public final static Property Account = new Property(8, String.class, "account", false, "ACCOUNT");
        public final static Property Time = new Property(9, Long.class, "time", false, "TIME");
    };


    public AttachmentDao(DaoConfig config) {
        super(config);
    }
    
    public AttachmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"attachment\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"TICKETID\" TEXT," + // 2: ticketid
                "\"STATUS\" INTEGER," + // 3: status
                "\"CLIENT_NAME\" TEXT," + // 4: clientName
                "\"PATH\" TEXT," + // 5: path
                "\"LAZY_ID\" TEXT," + // 6: lazyId
                "\"FAILED_TIME\" INTEGER," + // 7: failedTime
                "\"ACCOUNT\" TEXT," + // 8: account
                "\"TIME\" INTEGER);"); // 9: time
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_attachment_ID ON attachment" +
                " (\"ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"attachment\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Attachment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String ticketid = entity.getTicketid();
        if (ticketid != null) {
            stmt.bindString(3, ticketid);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(4, status);
        }
 
        String clientName = entity.getClientName();
        if (clientName != null) {
            stmt.bindString(5, clientName);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
 
        String lazyId = entity.getLazyId();
        if (lazyId != null) {
            stmt.bindString(7, lazyId);
        }
 
        Integer failedTime = entity.getFailedTime();
        if (failedTime != null) {
            stmt.bindLong(8, failedTime);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(9, account);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(10, time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Attachment readEntity(Cursor cursor, int offset) {
        Attachment entity = new Attachment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ticketid
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // clientName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lazyId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // failedTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // account
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Attachment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTicketid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setClientName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLazyId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFailedTime(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAccount(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Attachment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Attachment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
