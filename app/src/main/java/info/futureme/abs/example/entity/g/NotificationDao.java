package info.futureme.abs.example.entity.g;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "notification".
*/
public class NotificationDao extends AbstractDao<Notification, Long> {

    public static final String TABLENAME = "notification";

    /**
     * Properties of entity Notification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Timestamp = new Property(3, java.util.Date.class, "timestamp", false, "TIMESTAMP");
        public final static Property Desc = new Property(4, String.class, "desc", false, "DESC");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Img = new Property(6, String.class, "img", false, "IMG");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
        public final static Property Data = new Property(8, String.class, "data", false, "DATA");
        public final static Property Ticketid = new Property(9, String.class, "ticketid", false, "TICKETID");
        public final static Property Date = new Property(10, java.util.Date.class, "date", false, "DATE");
        public final static Property Account = new Property(11, String.class, "account", false, "ACCOUNT");
        public final static Property Readed = new Property(12, Boolean.class, "readed", false, "READED");
    };


    public NotificationDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"notification\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"TYPE\" INTEGER," + // 2: type
                "\"TIMESTAMP\" INTEGER," + // 3: timestamp
                "\"DESC\" TEXT," + // 4: desc
                "\"CONTENT\" TEXT," + // 5: content
                "\"IMG\" TEXT," + // 6: img
                "\"URL\" TEXT," + // 7: url
                "\"DATA\" TEXT," + // 8: data
                "\"TICKETID\" TEXT," + // 9: ticketid
                "\"DATE\" INTEGER," + // 10: date
                "\"ACCOUNT\" TEXT," + // 11: account
                "\"READED\" INTEGER);"); // 12: readed
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_notification_ID ON notification" +
                " (\"ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"notification\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Notification entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        java.util.Date timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(4, timestamp.getTime());
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(7, img);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(9, data);
        }
 
        String ticketid = entity.getTicketid();
        if (ticketid != null) {
            stmt.bindString(10, ticketid);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(11, date.getTime());
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(12, account);
        }
 
        Boolean readed = entity.getReaded();
        if (readed != null) {
            stmt.bindLong(13, readed ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Notification readEntity(Cursor cursor, int offset) {
        Notification entity = new Notification( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // timestamp
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // img
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // data
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ticketid
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // date
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // account
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0 // readed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Notification entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTimestamp(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImg(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setData(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTicketid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setAccount(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setReaded(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Notification entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Notification entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
